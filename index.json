[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/index.js",
    "content": "import FenceBuilder from './lib/FenceBuilder';\n\nexport default FenceBuilder;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "file",
    "name": "src/lib/Fence.js",
    "content": "import Result from './Result';\n\n/**\n* A 'built' FenceBuilder that can be exported for use in other functions.\n*/\nclass Fence {\n    /**\n    * @param    {array}    invokables    Array of invokable functions\n    */\n    constructor (invokables) {\n        this._invokables = invokables;\n    }\n\n    /**\n    * Iterates over an array of invokables. Each invokable is called with a subject\n    * which is the attribute value being validated.\n    *\n    * @param     {any}         subject     Some value to be validated\n    * @return    {Result}                  An object representing invoked functions\n    *                                      and their outputs\n    */\n    run (...subjects) {\n        const invokables = this._invokables;\n        const results = invokables.map(function(invokable) {\n            return invokable.invoke.apply(invokable, subjects);\n        });\n\n        return new Result(invokables, results, subjects);\n    }\n}\n\nexport default Fence;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/lib/Fence.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2,
    "kind": "class",
    "name": "Fence",
    "memberof": "src/lib/Fence.js",
    "static": true,
    "longname": "src/lib/Fence.js~Fence",
    "access": "public",
    "export": true,
    "importPath": "fence.js/src/lib/Fence.js",
    "importStyle": "Fence",
    "description": "A 'built' FenceBuilder that can be exported for use in other functions.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 3,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/Fence.js~Fence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Fence.js~Fence#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "Array of invokable functions"
      }
    ]
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "_invokables",
    "memberof": "src/lib/Fence.js~Fence",
    "static": false,
    "longname": "src/lib/Fence.js~Fence#_invokables",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "run",
    "memberof": "src/lib/Fence.js~Fence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Fence.js~Fence#run",
    "access": "public",
    "description": "Iterates over an array of invokables. Each invokable is called with a subject\nwhich is the attribute value being validated.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Some value to be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Result"
      ],
      "spread": false,
      "description": "An object representing invoked functions\n                                     and their outputs"
    }
  },
  {
    "__docId__": 6,
    "kind": "file",
    "name": "src/lib/FenceBuilder.js",
    "content": "import Invokable from './Invokable';\nimport Fence from './Fence';\n\n/**\n* A `FenceBuilder` is used to create an extensible `Fence`.\n*\n* An instance of `FenceBuilder` will have prototype methods that are created\n* through the `register()` method. When the `fork()` method is called all of the\n* instance's already registered methods will be transferred to a new instance of\n* `FenceBuilder` that is then returned. This is what allows you to 'extend'\n* a `Fence` as you can then continue to `register()` methods without mutating\n* the original `FenceBuilder`'s prototype.\n*\n* These prototypical methods are called `Invokable`'s. An `Invokable` is a named\n* function reference that optionally includes some predefined arguments that can\n* be used to make specific comparisons. *\n*/\nclass FenceBuilder {\n    /**\n    * @param    {Array}    invokables    A set of already defined `Invokable`'s\n    */\n    constructor (invokables) {\n        if (typeof invokables !== `undefined` && !Array.isArray(invokables)) {\n            throw `FenceBuilder constructor argument can only be an Array`;\n        }\n\n        this._invokables = invokables ? invokables.slice() : [];\n    }\n\n    /**\n    * Create a clone of a `FenceBuilder` instance so that it can be extended.\n    *\n    * @return    {FenceBuilder}    a reference to a new `FenceBuilder`\n    */\n    fork (proto) {\n        // Stop any other references to this `FenceBuilder` from registering\n        // additional methods (or overwriting currently existing ones)\n        proto = proto || Object.getPrototypeOf(this);\n\n        // Create a reference to this instance's `_invokables`, use them to seed the\n        // new instance's `_invokables`\n        const invokables = this._invokables;\n\n        // Create a new `FenceBuilder` that inherits from this `FenceBuilder`\n        const FB = function() {\n            FenceBuilder.call(this, invokables);\n        };\n\n        // Set the prototype so that registered functions are available\n        FB.prototype = Object.create(proto);\n        FB.prototype.constructor = FB;\n\n        // Instantiate the new `FenceBuilder`\n        return new FB();\n    }\n\n    /**\n    * Add a named function reference to the prototype of an instance of `FenceBuilder`\n    *\n    * @param     {String}              name    A named function reference\n    * @param     {Function}            fn      A reference to a validation function\n\n    * @return    {FenceBuilder}           The `FenceBuilder` instance being\n    *                                          operated on, used for function chaining\n    */\n    register (fn, name, memoize, debug, loggers) {\n        const proto = Object.getPrototypeOf(this);\n        proto[name] = function(...args) {\n            this._invokables.push(new Invokable(fn, name, args, memoize, debug, loggers));\n\n            return this;\n        };\n\n        return this.fork(proto);\n    }\n\n    /**\n    * Remove a named function reference from the prototype of an instance of `FenceBuilder`\n    * @param     {String}              name    A named function reference\n\n    * @return    {FenceBuilder}           The `FenceBuilder` instance being\n    *                                          operated on, used for function chaining\n    */\n    unregister (name) {\n        const proto = Object.getPrototypeOf(this);\n        delete proto[name];\n\n        const tmp = this.fork(proto);\n        tmp._invokables = this._invokables.filter(function(invokable) {\n            return invokable.getName() !== name;\n        });\n\n        return tmp;\n    }\n\n    /**\n    * Convert an instance of `FenceBuilder` to something that can be used to\n    * validate some value\n    *\n    * @return    {Fence}      an Object with a `run()` method that can be called\n    *                              with a value, will produce a list of `Results`\n    */\n    build () {\n        return new Fence(this._invokables);\n    }\n\n    /**\n    * Create a representation of an instance of `FenceBuilder`'s Invokable\n    * function reference names and arguments that can be persisted then later used\n    * by `hydrate()` recreate an equivalent `FenceBuilder`\n    *\n    * @return    {String}      a stringified JSON blob that can be persisted\n    */\n    serialize (returnFull) {\n        return JSON.stringify(this._invokables.map(function(invokable) {\n            return invokable.serialize(returnFull);\n        }));\n    }\n\n    /**\n    * Given a string representing a `serialize`'d `FenceBuilder`, attempt to\n    * recreate a list of `Invokables` by calling the named prototype references. If\n    * the `serialize`'d `FenceBuilder` includes a reference to an unavailable\n    * prototype method, an error is thrown.\n    *\n    * @param     {String}    invokables    A `stringify`'d JSON blob representing a\n    *                                      `FenceBuilder`'s `Invokeable`'s\n    * @return    {FenceBuilder}\n    */\n    hydrate (invokables) {\n        const tmp = this.fork();\n        tmp._invokables = [];\n\n        JSON.parse(invokables).map(JSON.parse).forEach(function(invokable) {\n            const name = invokable._name;\n            const args = invokable._args;\n            const fn = Object.getPrototypeOf(tmp)[name];\n\n            if (fn) {\n                fn.apply(tmp, args);\n            } else {\n                throw new Error(`Method ${name} missing during validation builder hydration`);\n            }\n        });\n\n        return tmp;\n    }\n}\n\nexport default FenceBuilder;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/lib/FenceBuilder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 7,
    "kind": "class",
    "name": "FenceBuilder",
    "memberof": "src/lib/FenceBuilder.js",
    "static": true,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder",
    "access": "public",
    "export": true,
    "importPath": "fence.js/src/lib/FenceBuilder.js",
    "importStyle": "FenceBuilder",
    "description": "A `FenceBuilder` is used to create an extensible `Fence`.\n\nAn instance of `FenceBuilder` will have prototype methods that are created\nthrough the `register()` method. When the `fork()` method is called all of the\ninstance's already registered methods will be transferred to a new instance of\n`FenceBuilder` that is then returned. This is what allows you to 'extend'\na `Fence` as you can then continue to `register()` methods without mutating\nthe original `FenceBuilder`'s prototype.\n\nThese prototypical methods are called `Invokable`'s. An `Invokable` is a named\nfunction reference that optionally includes some predefined arguments that can\nbe used to make specific comparisons. *",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 8,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "A set of already defined `Invokable`'s"
      }
    ]
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "_invokables",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#_invokables",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "fork",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#fork",
    "access": "public",
    "description": "Create a clone of a `FenceBuilder` instance so that it can be extended.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "FenceBuilder"
      ],
      "spread": false,
      "description": "a reference to a new `FenceBuilder`"
    },
    "params": [
      {
        "name": "proto",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "register",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#register",
    "access": "public",
    "description": "Add a named function reference to the prototype of an instance of `FenceBuilder`",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A named function reference"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "A reference to a validation function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FenceBuilder"
      ],
      "spread": false,
      "description": "The `FenceBuilder` instance being\n                                         operated on, used for function chaining"
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "unregister",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#unregister",
    "access": "public",
    "description": "Remove a named function reference from the prototype of an instance of `FenceBuilder`",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A named function reference"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FenceBuilder"
      ],
      "spread": false,
      "description": "The `FenceBuilder` instance being\n                                         operated on, used for function chaining"
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "build",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#build",
    "access": "public",
    "description": "Convert an instance of `FenceBuilder` to something that can be used to\nvalidate some value",
    "lineNumber": 103,
    "return": {
      "nullable": null,
      "types": [
        "Fence"
      ],
      "spread": false,
      "description": "an Object with a `run()` method that can be called\n                             with a value, will produce a list of `Results`"
    },
    "params": []
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#serialize",
    "access": "public",
    "description": "Create a representation of an instance of `FenceBuilder`'s Invokable\nfunction reference names and arguments that can be persisted then later used\nby `hydrate()` recreate an equivalent `FenceBuilder`",
    "lineNumber": 114,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a stringified JSON blob that can be persisted"
    },
    "params": [
      {
        "name": "returnFull",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "hydrate",
    "memberof": "src/lib/FenceBuilder.js~FenceBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/FenceBuilder.js~FenceBuilder#hydrate",
    "access": "public",
    "description": "Given a string representing a `serialize`'d `FenceBuilder`, attempt to\nrecreate a list of `Invokables` by calling the named prototype references. If\nthe `serialize`'d `FenceBuilder` includes a reference to an unavailable\nprototype method, an error is thrown.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "A `stringify`'d JSON blob representing a\n                                     `FenceBuilder`'s `Invokeable`'s"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FenceBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "src/lib/Invokable.js",
    "content": "/**\n* A validation function that will be invoked at some time\n*/\nclass Invokable {\n    /**\n    * @param    {Function}     fn      [required] function reference that is executed during invokation\n    * @param    {String}       name    [required] required if function is anonymous\n    *                                             will override function name property\n    * @param    {Array}        args    [optional] arguments to be applied to the function\n    * @param    {Boolean}      memoize [optional] when true, function calls are memoized\n    */\n    constructor (fn, name = ``, args = [], memoize = false) {\n        if (!fn || typeof fn !== `function`) {\n            throw `Invokable must be instantiated with a function`;\n        }\n\n        if (fn.name === `` && name === ``) {\n            throw `Invokable anonymous functions must have a name argument`;\n        }\n\n        if (!Array.isArray(args)) {\n            throw `Invokable arguments must be an array`;\n        }\n\n        if (typeof memoize !== `boolean`) {\n            throw `Invokable memoize argument must be boolean`;\n        }\n\n        this._name = name && name.length ? name : fn.name;\n        this._fn = fn;\n        this._args = args;\n        this._memoize = memoize;\n\n        if (this._memoize) {\n            this.memoize();\n        }\n    }\n\n    /**\n    * Executes a validation function against a subject and any predefined arguments\n    *\n    * @method    invoke\n    * @param     {Any}         subject    the value to be validated\n    * @return    {Boolean}                the result of the validation\n    */\n    invoke (...subjects) {\n        let fn = this._fn;\n        let args = subjects.concat(this._args);\n\n        if (this._memoize && this._memoizedFn) {\n            fn = this._memoizedFn;\n            args = [this._fn].concat(args);\n        }\n\n        return fn.apply(this, args);\n    }\n\n    /**\n     * Create a private, non-enumerable and non-writable `_cache` property, as well\n     * as a `_memoizedFn` property. Calling an `Invokable`'s `_memoizedFn` rather\n     * than its `_fn` will cause the result to be stored in the `_cache`, keyed by\n     * the function arguments.\n     *\n     * @method    memoize\n     */\n    memoize () {\n        Object.defineProperty(this, `_cache`, {\n            value: {},\n            writable: false,\n            configurable: true,\n            enumerable: false\n        });\n\n        const memoized = function(fn, ...args) {\n            const key = args && args.length ? args[0] : `none`;\n            const cache = memoized.cache;\n\n            if (cache[key]) {\n                return cache[key];\n            }\n\n            const result = fn.apply(fn, args);\n            cache[key] = result;\n\n            return result;\n        };\n\n        memoized.cache = this._cache;\n        this._memoizedFn = memoized;\n    }\n\n    /**\n     * Remove the `_cache` property and `_memoizedFn`. Set `_memoize` to false\n     * so that `_fn` is called.\n     * @method    dememoize\n     */\n    dememoize () {\n        delete this._cache;\n        delete this._memoizedFn;\n        this._memoize = false;\n    }\n\n    /**\n     * Represent an Invokable as a string.\n     * @method    serialize\n     * @return    {String}                    a stringified JSON blob representing an\n     *                                        `Invokable` and its arguments\n     */\n    serialize () {\n        return JSON.stringify(this);\n    }\n}\n\nexport default Invokable;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/lib/Invokable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "class",
    "name": "Invokable",
    "memberof": "src/lib/Invokable.js",
    "static": true,
    "longname": "src/lib/Invokable.js~Invokable",
    "access": "public",
    "export": true,
    "importPath": "fence.js/src/lib/Invokable.js",
    "importStyle": "Invokable",
    "description": "A validation function that will be invoked at some time",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 18,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/Invokable.js~Invokable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "[required] function reference that is executed during invokation"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "[required] required if function is anonymous\n                                            will override function name property"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "[optional] arguments to be applied to the function"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "memoize",
        "description": "[optional] when true, function calls are memoized"
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "_name",
    "memberof": "src/lib/Invokable.js~Invokable",
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#_name",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "_fn",
    "memberof": "src/lib/Invokable.js~Invokable",
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#_fn",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "_args",
    "memberof": "src/lib/Invokable.js~Invokable",
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#_args",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "_memoize",
    "memberof": "src/lib/Invokable.js~Invokable",
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#_memoize",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "invoke",
    "memberof": "src/lib/Invokable.js~Invokable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#invoke",
    "access": "public",
    "description": "Executes a validation function against a subject and any predefined arguments",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "   invoke"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "the value to be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "the result of the validation"
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "memoize",
    "memberof": "src/lib/Invokable.js~Invokable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#memoize",
    "access": "public",
    "description": "Create a private, non-enumerable and non-writable `_cache` property, as well\nas a `_memoizedFn` property. Calling an `Invokable`'s `_memoizedFn` rather\nthan its `_fn` will cause the result to be stored in the `_cache`, keyed by\nthe function arguments.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "   memoize"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "_memoizedFn",
    "memberof": "src/lib/Invokable.js~Invokable",
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#_memoizedFn",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "dememoize",
    "memberof": "src/lib/Invokable.js~Invokable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#dememoize",
    "access": "public",
    "description": "Remove the `_cache` property and `_memoizedFn`. Set `_memoize` to false\nso that `_fn` is called.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "   dememoize"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/lib/Invokable.js~Invokable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Invokable.js~Invokable#serialize",
    "access": "public",
    "description": "Represent an Invokable as a string.",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "   serialize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a stringified JSON blob representing an\n                                       `Invokable` and its arguments"
    },
    "params": []
  },
  {
    "__docId__": 29,
    "kind": "file",
    "name": "src/lib/Result.js",
    "content": "import Invokable from './Invokable';\n\n/**\n* Adapter for mapping validation invokables to their results\n*/\nclass Result {\n    /**\n    * @param    {Invokable[]}    invokables     Array of invokable validation functions\n    * @param    {Result[]}          results     Array of values returned from invoked validation functions\n    */\n    constructor (invokables = [], results = [], subject = null) {\n        if (!Array.isArray(invokables) || invokables.length <= 0) {\n            throw `Result must be instantiated with an array containing at least one Invokable`;\n        }\n\n        if (!Array.isArray(results) || results.length <= 0) {\n            throw `Result must be instantiated with an array containing at least one result`;\n        }\n\n        if (invokables.length !== results.length) {\n            throw `There must be exactly one result for each Invokable`;\n        }\n\n        this._invokables = invokables;\n        this._results = results;\n        this._subject = subject;\n    }\n\n    /**\n    * A Results summary that will return `true` if all validations passed\n    *\n    * @return    {Boolean}    `true` if all Results are also `true`, `false` otherwise\n    */\n    forAll () {\n        return  this._results.reduce(function(acc, result) {\n            if (Array.isArray(result)) {\n                return acc && result.reduce(function(subAcc, subResult) {\n                    if (!(subResult instanceof Result)) {\n                        throw `Result results array can only contain booleans or arrays of Results`;\n                    }\n\n                    return subAcc && subResult.forAll();\n                }, acc);\n            }\n\n            return acc && result === true;\n        }, true);\n    }\n\n    /**\n    * A Results summary that will return `true` if any validations passed\n    * @return    {Boolean}    `true` if any one Result is also `true`, `false` if\n    *                         all results are also `false`\n    */\n    forAny () {\n        return this._results.reduce(function (acc, result) {\n            if (Array.isArray(result)) {\n                return acc || result.reduce(function(subAcc, subResult) {\n                    if (!(subResult instanceof Result)) {\n                        throw `Result results array can only contain booleans or arrays of Results`;\n                    }\n\n                    return subAcc || subResult.forAny();\n                }, acc) === true;\n            }\n\n            return acc || result === true;\n        }, false);\n    }\n\n    /**\n    * Filters results by name\n    * @param     {String}    name    The name for a specific Invokable. This value\n    *                                is set by `FenceBuilder.register`\n    * @return    {Array}             An array of Booleans derived from specified\n    *                                Invokables\n    */\n    forOne (name) {\n        if (!(typeof name === `string`) || name.length <= 0) {\n            throw `Result forOne must have Invokable name as parameter`;\n        }\n\n        return this._results.filter((element, index) => {\n            if (!(this._invokables[index] instanceof Invokable)) {\n                throw `Result invokables array can only contain Invokables`;\n            }\n\n            return this._invokables[index]._name === name;\n        });\n    }\n\n    explain (logger, indent) {\n        logger = logger || console.log;\n        indent = indent || '  ';\n\n        logger(indent, 'subject:', JSON.stringify(this._subject));\n        logger(indent + indent, this.forAll() ? '[✓]' : '[x]', 'forAll');\n        logger(indent + indent, this.forAny() ? '[✓]' : '[x]', 'forAny');\n\n        logger(indent, 'tests:');\n        for (var i = 0; i < this._results.length; i++) {\n            const result = this._results[i];\n            const invokable = this._invokables[i];\n            const testName = invokable._name;\n            const testArgs = invokable._args;\n\n            let testLabel = testName;\n            if (testArgs.length > 0) {\n                testLabel += ' (' + JSON.stringify(testArgs) + ')';\n            }\n\n            logger(indent + indent, result ? '[✓]' : '[x]', testLabel);\n\n            if (Array.isArray(result)) {\n                result.forEach(function(subResult) {\n                    subResult.explain(logger, indent + indent);\n                });\n\n                continue;\n            }\n        }\n    }\n}\n\nexport default Result;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/lib/Result.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 30,
    "kind": "class",
    "name": "Result",
    "memberof": "src/lib/Result.js",
    "static": true,
    "longname": "src/lib/Result.js~Result",
    "access": "public",
    "export": true,
    "importPath": "fence.js/src/lib/Result.js",
    "importStyle": "Result",
    "description": "Adapter for mapping validation invokables to their results",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 31,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Result.js~Result#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Invokable[]"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "Array of invokable validation functions"
      },
      {
        "nullable": null,
        "types": [
          "Result[]"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "Array of values returned from invoked validation functions"
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "_invokables",
    "memberof": "src/lib/Result.js~Result",
    "static": false,
    "longname": "src/lib/Result.js~Result#_invokables",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "_results",
    "memberof": "src/lib/Result.js~Result",
    "static": false,
    "longname": "src/lib/Result.js~Result#_results",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "_subject",
    "memberof": "src/lib/Result.js~Result",
    "static": false,
    "longname": "src/lib/Result.js~Result#_subject",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "forAll",
    "memberof": "src/lib/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Result.js~Result#forAll",
    "access": "public",
    "description": "A Results summary that will return `true` if all validations passed",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if all Results are also `true`, `false` otherwise"
    },
    "params": []
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "forAny",
    "memberof": "src/lib/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Result.js~Result#forAny",
    "access": "public",
    "description": "A Results summary that will return `true` if any validations passed",
    "lineNumber": 55,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if any one Result is also `true`, `false` if\n                        all results are also `false`"
    },
    "params": []
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "forOne",
    "memberof": "src/lib/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Result.js~Result#forOne",
    "access": "public",
    "description": "Filters results by name",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name for a specific Invokable. This value\n                               is set by `FenceBuilder.register`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of Booleans derived from specified\n                               Invokables"
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "explain",
    "memberof": "src/lib/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/Result.js~Result#explain",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "logger",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "src/lib/__tests__/FenceBuilder.test.js",
    "content": "import FenceBuilder from '../FenceBuilder';\nimport Invokable from '../Invokable';\n\ndescribe(`FenceBuilder`, function () {\n    test(`FenceBuilder bad arguments`, () => {\n        expect(() => new FenceBuilder(null, [])).toThrow();\n    });\n\n    test(`Invokable serialize is stringified correctly`, () => {\n        const FB = new FenceBuilder();\n        const fb = FB.fork().register(() => true, `fn`);\n        const invokable = new Invokable(() => true, `fn`);\n\n        const parsedFb = JSON.parse(fb.fork().fn().serialize());\n        const parsedInvokable = JSON.parse(invokable.serialize());\n\n        expect(JSON.parse(parsedFb[0])).toEqual(parsedInvokable);\n    });\n\n    test(`Invokable serialize is hydrated correctly`, () => {\n        const fn = () => true;\n        const FB = new FenceBuilder();\n        const fb = FB.fork().register(fn);\n\n        const serialized = fb.fork().serialize();\n        const hydrated = (new FenceBuilder()).fork().register(fn).fork().hydrate(serialized);\n\n        expect(fb.fork()).toMatchObject(hydrated);\n    });\n\n    // test(`Invokable serialize bad hydrate`, () => {\n    //     const fn = () => true;\n    //     const FB1 = new FenceBuilder();\n    //     const FB2 = new FenceBuilder();\n    //     const fb = FB1.fork();\n    //     const serialized = FB2.fork().register(fn).serialize();\n    //\n    //     expect(() => fb.hydrate(serialized)).toThrow();\n    // });\n});\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/lib/__tests__/FenceBuilder.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "file",
    "name": "src/lib/__tests__/Invokable.test.js",
    "content": "import Invokable from '../Invokable';\n\ndescribe(`Invokable`, function () {\n    test(`Invokable empty constructor`, () => {\n        expect(() => new Invokable()).toThrow();\n    });\n\n    test(`Invokable no fn`, () => {\n        expect(() => new Invokable(null, `name`, [], true)).toThrow();\n    });\n\n    test(`Invokable anonymous fn no name`, () => {\n        expect(() => new Invokable(() => true)).toThrow();\n    });\n\n    test(`Invokable bad args`, () => {\n        expect(() => new Invokable(() => true, `name`, `string`)).toThrow();\n    });\n\n    test(`Invokable bad memoize`, () => {\n        expect(() => new Invokable(() => true, `name`, [], null)).toThrow();\n    });\n\n    test(`Invokable anonymous fn with name is created`, () => {\n        expect(new Invokable(() => true, `name`)).toBeInstanceOf(Invokable);\n    });\n\n    test(`Invokable anonymous fn with name has correct name property`, () => {\n        const name = `name`;\n        const invokable = new Invokable(() => true, name);\n        expect(invokable._name).toEqual(name);\n    });\n\n    test(`Invokable named fn with no name has correct name property`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn);\n        expect(invokable._name).toEqual(`fn`);\n    });\n\n    test(`Invokable named fn with name has correct name property`, () => {\n        const fn = () => true;\n        const name = `name`;\n        const invokable = new Invokable(fn, name);\n        expect(invokable._name).toEqual(name);\n    });\n\n    test(`Invokable default properties`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn);\n\n        expect(invokable).toHaveProperty(`_name`, `fn`);\n        expect(invokable).toHaveProperty(`_args`, []);\n        expect(invokable).toHaveProperty(`_memoize`, false);\n        expect(invokable).not.toHaveProperty(`_cache`);\n        expect(invokable).not.toHaveProperty(`_memoizedFn`);\n    });\n\n    test(`Invokable memoized instantiates`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn, null, [], true);\n\n        expect(invokable).toHaveProperty(`_name`, `fn`);\n        expect(invokable).toHaveProperty(`_args`, []);\n        expect(invokable).toHaveProperty(`_memoize`, true);\n        expect(invokable).toHaveProperty(`_memoizedFn`);\n    });\n\n    test(`Invokable can be invoked`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn);\n\n        expect(invokable.invoke()).toEqual(true);\n    });\n\n    test(`Invokable memoized can be invoked`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn, null, [], true);\n\n        expect(invokable.invoke()).toEqual(true);\n    });\n\n    test(`Invokable memoized use 'none' key when no arguments`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn, null, [], true);\n\n        expect(invokable.invoke()).toEqual(true);\n        expect(invokable._cache).toHaveProperty(`none`, true);\n    });\n\n    test(`Invokable memoized use first argument key`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn, null, [], true);\n\n        expect(invokable.invoke(`a`)).toEqual(true);\n        expect(invokable._cache).toHaveProperty(`a`, true);\n    });\n\n    test(`Invokable memoized doesn't call function with same args more than once`, () => {\n        const counter = jest.fn();\n        const fn = () => { counter(); return true; };\n        const invokable = new Invokable(fn, null, [], true);\n\n        invokable.invoke(`a`);\n        invokable.invoke(`a`);\n        invokable.invoke(`b`);\n        expect(counter).toHaveBeenCalledTimes(2);\n\n        invokable.dememoize();\n        invokable.invoke(`a`);\n        invokable.invoke(`a`);\n        expect(counter).toHaveBeenCalledTimes(4);\n    });\n\n    test(`Invokable dememoized clears properties`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn, null, [], true);\n\n        invokable.invoke(`a`);\n        expect(invokable).toHaveProperty(`_memoize`, true);\n        expect(invokable).toHaveProperty(`_cache`);\n        expect(invokable).toHaveProperty(`_memoizedFn`);\n        expect(invokable._cache).toHaveProperty(`a`, true);\n\n        invokable.dememoize();\n\n        expect(invokable).toHaveProperty(`_memoize`, false);\n        expect(invokable).not.toHaveProperty(`_cache`);\n        expect(invokable).not.toHaveProperty(`_memoizedFn`);\n    });\n\n    test(`Invokable serialize is stringified correctly`, () => {\n        const fn = () => true;\n        const invokable = new Invokable(fn, null, [], false);\n        const parsed = JSON.parse(invokable.serialize());\n\n        expect(parsed).toHaveProperty(`_name`, `fn`);\n        expect(parsed).toHaveProperty(`_args`, []);\n        expect(parsed).toHaveProperty(`_memoize`, false);\n    });\n});\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/lib/__tests__/Invokable.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 41,
    "kind": "file",
    "name": "src/lib/__tests__/Result.test.js",
    "content": "import Result from '../Result';\nimport Invokable from '../Invokable';\n\ndescribe(`Result`, function () {\n    test(`Result empty constructor`, () => {\n        expect(() => new Result()).toThrow();\n    });\n\n    test(`Result no invokables`, () => {\n        expect(() => new Result(null, [])).toThrow();\n    });\n\n    test(`Result no results`, () => {\n        expect(() => new Result([], null)).toThrow();\n    });\n\n    test(`Result null invokables and results`, () => {\n        expect(() => new Result(null, null)).toThrow();\n    });\n\n    test(`Result empty invokables and results`, () => {\n        expect(() => new Result([], [])).toThrow();\n    });\n\n    test(`Result invokables and empty results`, () => {\n        expect(() => new Result([true], [])).toThrow();\n    });\n\n    test(`Result mismatched invokables and results`, () => {\n        expect(() => new Result([null], [null, null])).toThrow();\n    });\n\n    test(`Result forAll true`, () => {\n        const result = new Result([null, null, null], [true, true, true]);\n        expect(result.forAll()).toEqual(true);\n    });\n\n    test(`Result forAll mixed`, () => {\n        const result = new Result([null, null, null], [true, false, true]);\n        expect(result.forAll()).toEqual(false);\n    });\n\n    test(`Result forAll bad sub array`, () => {\n        const result = new Result([null], [[true]]);\n        expect(() => result.forAll()).toThrow();\n    });\n\n    test(`Result forAll good sub array`, () => {\n        const subResult = new Result([null], [true]);\n        const result = new Result([null], [[subResult]]);\n\n        expect(result.forAll()).toEqual(true);\n    });\n\n    test(`Result forAll mixed sub array`, () => {\n        const subResult = new Result([null, false], [true, false]);\n        const result = new Result([null, null], [true, [subResult]]);\n\n        expect(result.forAll()).toEqual(false);\n    });\n\n    test(`Result forAny true`, () => {\n        const result = new Result([null, null, null], [true, true, true]);\n        expect(result.forAny()).toEqual(true);\n    });\n\n    test(`Result forAny mixed`, () => {\n        const result = new Result([null, null, null], [true, false, true]);\n        expect(result.forAny()).toEqual(true);\n    });\n\n    test(`Result forAny false`, () => {\n        const result = new Result([null, null, null], [false, false, false]);\n        expect(result.forAny()).toEqual(false);\n    });\n\n    test(`Result forAny bad sub array`, () => {\n        const result = new Result([null], [[true]]);\n        expect(() => result.forAny()).toThrow();\n    });\n\n    test(`Result forAny good sub array`, () => {\n        const subResult = new Result([null], [true]);\n        const result = new Result([null], [[subResult]]);\n\n        expect(result.forAny()).toEqual(true);\n    });\n\n    test(`Result forAny mixed sub array`, () => {\n        const subResult = new Result([null, false], [true, false]);\n        const result = new Result([null, null], [true, [subResult]]);\n\n        expect(result.forAny()).toEqual(true);\n    });\n\n    test(`Result forAny false sub array`, () => {\n        const subResult = new Result([null, false], [false, false]);\n        const result = new Result([null, null], [false, [subResult]]);\n\n        expect(result.forAny()).toEqual(false);\n    });\n\n    test(`Result forOne bad name`, () => {\n        const result = new Result([null], [false]);\n\n        expect(() => result.forOne()).toThrow();\n        expect(() => result.forOne(``)).toThrow();\n        expect(() => result.forOne([true])).toThrow();\n        expect(() => result.forOne(`fn`)).toThrow();\n    });\n\n    test(`Result forOne good name`, () => {\n        const invokable = new Invokable(() => true, `fn`);\n        const result = new Result([invokable], [invokable.invoke()]);\n\n        expect(result.forOne(`fn`)).toEqual([true]);\n    });\n});\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/fence.js/src/lib/__tests__/Result.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# fence.js\n\n![Node](https://img.shields.io/node/v/fence.js.svg?style=flat-square)\n[![NPM](https://img.shields.io/npm/v/fence.js.svg?style=flat-square)](https://www.npmjs.com/package/fence.js)\n[![Travis](https://img.shields.io/travis/dotcarls/fence.js/master.svg?style=flat-square)](https://travis-ci.org/dotcarls/fence.js)\n[![David](https://img.shields.io/david/dotcarls/fence.js.svg?style=flat-square)](https://david-dm.org/dotcarls/fence.js)\n[![Coverage Status](https://img.shields.io/coveralls/dotcarls/fence.js.svg?style=flat-square)](https://coveralls.io/github/dotcarls/fence.js)\n\n> A framework to create efficient and extensible validations\n\n## Features\n\n-   Flexible\n-   Deterministic\n-   Extendable\n-   Persistable\n-   Portable\n\n## Overview\n\nOne problem with validation plugins, frameworks, etc. is that they are usually opinionated in some way -- they have an inflexible API, require certain dependencies, etc. This hampers reusability and introduces additional complexity as an application's validation requirements evolve over time. Further, if we wanted to conditionally validate certain attributes (i.e. allow an end user to 'configure' the validation), we would typically have to hard code this functionality into each validation.\n\nThe goal of this module is to solve these problems without getting in the way. By prioritizing validation composition over all else, this framework is ideal for creating complex validations that are both portable and maintainable.\n\n## Usage\n\n### Example\n```js\nconst FenceBuilder = require('./lib');\nconst FB = new FenceBuilder();\n\nFB.register('strictEqual', function (val1, val2) {\n    return val1 === val2;\n});\n\nconst validation = FB.forge().strictEqual('a').build();\nconsole.log(`validation of \"a\": ${validation.run('a')}`);\nconsole.log(`validation of \"b\": ${validation.run('b')}`);\n```\n\nA Fence begins with an instance of `FenceBuilder`. The general lifecycle of a `FenceBuilder` instance is: instantiation, registration, composition, and building.\n\n### Instantiation\n\nAn instance can be created by creating a new `FenceBuilder`:\n\n```js\n// new FenceBuilder\nconst FB = new FenceBuilder();\n```\n\nAn instance can also be created from existing instances of `FenceBuilder` via the `forge()` method:\n\n```js\n// new FenceBuilder\nconst FB = new FenceBuilder();\n\n// someFence 'extends' FB\nconst someFence = FB.forge();\n\n// anotherFence 'extends' someFence\nconst anotherFence = someFence.forge();\n```\n\nWhen an instance is `forge()`'d, its prototype is copied by reference and used to instantiate a new instance of `FenceBuilder` that is then returned. The result of calling`forge()` is a 'child' instance which can be acted on without affecting its parent.\n\n### Registration\n\nA fresh instance of `FenceBuilder` won't be able to do much -- we must 'register' functions so that they can be used during the composition phase. Registering a function will add an instance method to an instance of `FenceBuilder`. Doing so makes the registered function available for use during composition. To register a function, provide `register()` with a `name` and a function reference or declaration.\n\n```js\n// new FenceBuilder\nconst FB = new FenceBuilder();\n\nFB.register('strictEqual', function(val1, val2) {\n    return val1 === val2;\n});\n```\n\nThe `name` attribute is used to promote determinism in cases where function references can not be passed around. Consider the case where we want to validate something on the server and the client -- the server may have a `hasValue` function available from `vcutils` and the client may have a `hasValue` function available from `DeviceSettings`. If two named functions are functionally equivalent (produce the exact same output for every possible input) then we can say overall the validation is deterministic regardless of its execution context.\n\nWhen registering a function, we accept a `name` and a function reference.  When these instance methods are called, they create an `Invokable` which represents a function and optionally some arguments.\n\n### Examples\n\nSee [`example`](example/script.js) folder or the [runkit](https://runkit.com/dotcarls/fence.js) example.\n\n### Builds\n\nIf you don't use a package manager, you can [access `fence.js` via unpkg (CDN)](https://unpkg.com/fence.js/), download the source, or point your package manager to the url.\n\n`fence.js` is compiled as a collection of [CommonJS](http://webpack.github.io/docs/commonjs.html) modules & [ES2015 modules](http://www.2ality.com/2014/0\n  -9/es6-modules-final.html) for bundlers that support the `jsnext:main` or `module` field in package.json (Rollup, Webpack 2)\n\nThe `fence.js` package includes precompiled production and development [UMD](https://github.com/umdjs/umd) builds in the [`dist` folder](https://unpkg.com/fence.js/dist/). They can be used directly without a bundler and are thus compatible with many popular JavaScript module loaders and environments. You can drop a UMD build as a [`<script>` tag](https://unpkg.com/fence.js) on your page. The UMD builds make `fence.js` available as a `window.fence.js` global variable.\n\n### License\n\nThe code is available under the [MIT](LICENSE) license.\n\n### Contributing\n\nWe are open to contributions, see [CONTRIBUTING.md](CONTRIBUTING.md) for more info.\n\n### Misc\n\nThis module was created using [generator-module-boilerplate](https://github.com/duivvv/generator-module-boilerplate).\n",
    "longname": "/Users/tim.carlson/Dev/fence.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]