[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/index.js",
    "content": "import ValidationBuilder from './lib/ValidationBuilder';\n\nexport default ValidationBuilder;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/chain/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "file",
    "name": "src/lib/Invokable.js",
    "content": "/**\n* A validation function that will be invoked at some time\n*\n* @param    {String}       name    [required] Function Name used for prototype / lookups\n* @param    {Function}     fn      [required] Function reference that is executed during invokation\n* @param    {Array}        args    [optional] arguments to be applied to the function\n*/\nfunction Invokable (name, fn, args, memoize) {\n    this._name = name;\n    this._fn = fn;\n    this._args = args ? Array.prototype.slice.call(args) : [];\n    this._memoize = memoize === true;\n\n    if (this._memoize) {\n        this.memoize();\n    }\n}\n\n/**\n* Executes a validation function against a subject and any predefined arguments\n*\n* @param     {Any}         subject    the value to be validated\n* @return    {Boolean}                the result of the validation\n*/\nInvokable.prototype.invoke = function(...subjects) {\n    let fn = this._fn;\n    let args = subjects.concat(this._args);\n\n    if (this._memoize && this._memoizedFn) {\n        fn = this._memoizedFn;\n        args = [this._fn].concat(args);\n    }\n\n    return fn.apply(this, args);\n};\n\nInvokable.prototype.memoize = function() {\n    Object.defineProperty(this, '_cache', {\n        value: {},\n        writable: false,\n        configurable: true,\n        enumerable: false\n    });\n\n    const memoized = function(fn, ...args) {\n        const key = args[0];\n        const cache = memoized.cache;\n\n        if (cache[key]) {\n            return cache[key];\n        }\n\n        const result = fn.apply(fn, args);\n        cache[key] = result;\n\n        return result;\n    };\n\n    memoized.cache = this._cache;\n    this._memoizedFn = memoized;\n};\n\nInvokable.prototype.dememoize = function() {\n    delete this._cache;\n    delete this._memoizedFn;\n    this._memoize = false;\n};\n\nInvokable.prototype.serialize = function(returnFull) {\n    if (returnFull === true) {\n        return JSON.stringify(this);\n    }\n\n    const obj = {\n        _name: this._name,\n        _args: this._args,\n        _memoize: this._memoize\n    };\n    return JSON.stringify(obj);\n};\n\nexport default Invokable;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/chain/src/lib/Invokable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2,
    "kind": "function",
    "name": "invoke",
    "memberof": "src/lib/Invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Invokable.js~invoke",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Invokable.js",
    "importStyle": null,
    "description": "Executes a validation function against a subject and any predefined arguments",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "the value to be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "the result of the validation"
    }
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "memoize",
    "memberof": "src/lib/Invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Invokable.js~memoize",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 4,
    "kind": "function",
    "name": "dememoize",
    "memberof": "src/lib/Invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Invokable.js~dememoize",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "serialize",
    "memberof": "src/lib/Invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Invokable.js~serialize",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "returnFull",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "Invokable",
    "memberof": "src/lib/Invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Invokable.js~Invokable",
    "access": "public",
    "export": true,
    "importPath": "Chain/src/lib/Invokable.js",
    "importStyle": "Invokable",
    "description": "A validation function that will be invoked at some time",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "[required] Function Name used for prototype / lookups"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "[required] Function reference that is executed during invokation"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "[optional] arguments to be applied to the function"
      }
    ],
    "return": null
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "src/lib/Result.js",
    "content": "/**\n * Adapter for mapping validation invokables to their results\n *\n * @param    {Array}    invokables    Array of invokable validation functions\n * @param    {Array}    results       Array of values returned from invoked validation functions\n */\nfunction Result (invokables, results, subject) {\n    this._invokables = invokables;\n    this._results = results;\n    this._subject = subject;\n}\n\n/**\n * A Results summary that will return `true` if all validations passed\n *\n * @return    {Boolean}    `true` if all Results are also `true`, `false` otherwise\n */\nResult.prototype.forAll = function() {\n    const results = this._results;\n\n    return results.reduce(function(acc, result) {\n        if (Array.isArray(result)) {\n            return acc && result.reduce(function(subAcc, subResult) {\n                return subAcc && subResult.forAll();\n            }, acc);\n        }\n\n        return acc && result === true;\n    }, true);\n};\n\n/**\n * A Results summary that will return `true` if any validations passed\n * @return    {Boolean}    `true` if any one Result is also `true`, `false` if\n *                         all results are also `false`\n */\nResult.prototype.forAny = function() {\n    const results = this._results;\n\n    return results.reduce(function (acc, result) {\n        if (Array.isArray(result)) {\n            return acc || result.reduce(function(subAcc, subResult) {\n                return subAcc || subResult.forAny();\n            }, acc) === true;\n        }\n\n        return acc || result === true;\n    }, false);\n};\n\n/**\n * Filters results by name\n * @param     {String}    name    The name for a specific Invokable. This value\n *                                is set by `ValidationBuilder.register`\n * @return    {Array}             An array of Booleans derived from specified\n *                                Invokables\n */\nResult.prototype.forOne = function(name) {\n    const invokables = this._invokables;\n    const results = this._results;\n\n    return results.filter(function(element, index) {\n        return invokables[index].getName() === name;\n    });\n};\n\nResult.prototype.explain = function(logger, indent) {\n    logger = logger || console.log;\n    indent = indent || '  ';\n\n    logger(indent, 'subject:', JSON.stringify(this._subject));\n    logger(indent + indent, this.forAll() ? '[✓]' : '[x]', 'forAll');\n    logger(indent + indent, this.forAny() ? '[✓]' : '[x]', 'forAny');\n\n    logger(indent, 'tests:');\n    for (var i = 0; i < this._results.length; i++) {\n        const result = this._results[i];\n        const invokable = this._invokables[i];\n        const testName = invokable._name;\n        const testArgs = invokable._args;\n\n        let testLabel = testName;\n        if (testArgs.length > 0) {\n            testLabel += ' (' + JSON.stringify(testArgs) + ')';\n        }\n\n        logger(indent + indent, result ? '[✓]' : '[x]', testLabel);\n\n        if (Array.isArray(result)) {\n            result.forEach(function(subResult) {\n                subResult.explain(logger, indent + indent);\n            });\n\n            continue;\n        }\n    }\n};\n\nexport default Result;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/chain/src/lib/Result.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "function",
    "name": "forAll",
    "memberof": "src/lib/Result.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Result.js~forAll",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Result.js",
    "importStyle": null,
    "description": "A Results summary that will return `true` if all validations passed",
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if all Results are also `true`, `false` otherwise"
    },
    "params": []
  },
  {
    "__docId__": 9,
    "kind": "function",
    "name": "forAny",
    "memberof": "src/lib/Result.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Result.js~forAny",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Result.js",
    "importStyle": null,
    "description": "A Results summary that will return `true` if any validations passed",
    "lineNumber": 37,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if any one Result is also `true`, `false` if\n                        all results are also `false`"
    },
    "params": []
  },
  {
    "__docId__": 10,
    "kind": "function",
    "name": "forOne",
    "memberof": "src/lib/Result.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Result.js~forOne",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Result.js",
    "importStyle": null,
    "description": "Filters results by name",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name for a specific Invokable. This value\n                               is set by `ValidationBuilder.register`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of Booleans derived from specified\n                               Invokables"
    }
  },
  {
    "__docId__": 11,
    "kind": "function",
    "name": "explain",
    "memberof": "src/lib/Result.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Result.js~explain",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "logger",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 12,
    "kind": "function",
    "name": "Result",
    "memberof": "src/lib/Result.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Result.js~Result",
    "access": "public",
    "export": true,
    "importPath": "Chain/src/lib/Result.js",
    "importStyle": "Result",
    "description": "Adapter for mapping validation invokables to their results",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "Array of invokable validation functions"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "Array of values returned from invoked validation functions"
      }
    ],
    "return": null
  },
  {
    "__docId__": 13,
    "kind": "file",
    "name": "src/lib/Validation.js",
    "content": "import Result from './Result';\n\n/**\n * A 'built' ValidationBuilder that can be exported for use in other functions.\n *\n * @param    {array}    invokables    Array of invokable functions\n */\nfunction Validation (invokables) {\n    this._invokables = invokables;\n}\n\n/**\n * Iterates over an array of invokables. Each invokable is called with a subject\n * which is the attribute value being validated.\n *\n * @param     {any}         subject     Some value to be validated\n * @return    {Result}                  An object representing invoked functions\n *                                      and their outputs\n */\nValidation.prototype.run = function(...subjects) {\n    const invokables = this._invokables;\n    const results = invokables.map(function(invokable) {\n        return invokable.invoke.apply(invokable, subjects);\n    });\n\n    return new Result(invokables, results, subjects);\n};\n\nexport default Validation;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/chain/src/lib/Validation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "run",
    "memberof": "src/lib/Validation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Validation.js~run",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/Validation.js",
    "importStyle": null,
    "description": "Iterates over an array of invokables. Each invokable is called with a subject\nwhich is the attribute value being validated.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Some value to be validated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Result"
      ],
      "spread": false,
      "description": "An object representing invoked functions\n                                     and their outputs"
    }
  },
  {
    "__docId__": 15,
    "kind": "function",
    "name": "Validation",
    "memberof": "src/lib/Validation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/Validation.js~Validation",
    "access": "public",
    "export": true,
    "importPath": "Chain/src/lib/Validation.js",
    "importStyle": "Validation",
    "description": "A 'built' ValidationBuilder that can be exported for use in other functions.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "Array of invokable functions"
      }
    ],
    "return": null
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "src/lib/ValidationBuilder.js",
    "content": "import Invokable from './Invokable';\nimport Validation from './Validation';\n\n/**\n * A `ValidationBuilder` is used to create an extensible `Validation`.\n *\n * An instance of `ValidationBuilder` will have prototype methods that are created\n * through the `register()` method. When the `fork()` method is called all of the\n * instance's already registered methods will be transferred to a new instance of\n * `ValidationBuilder` that is then returned. This is what allows you to 'extend'\n * a `Validation` as you can then continue to `register()` methods without mutating\n * the original `ValidationBuilder`'s prototype.\n *\n * These prototypical methods are called `Invokable`'s. An `Invokable` is a named\n * function reference that optionally includes some predefined arguments that can\n * be used to make specific comparisons.\n *\n * @param    {Array}    invokables    A set of already defined `Invokable`'s\n */\nfunction ValidationBuilder (invokables) {\n    this._invokables = invokables ? invokables.slice() : [];\n}\n\n/**\n * Create a clone of a `ValidationBuilder` instance so that it can be extended.\n *\n * @return    {ValidationBuilder}    a reference to a new `ValidationBuilder`\n */\nValidationBuilder.prototype.fork = function(proto) {\n    // Stop any other references to this `ValidationBuilder` from registering\n    // additional methods (or overwriting currently existing ones)\n    proto = proto || Object.getPrototypeOf(this);\n\n    // Create a reference to this instance's `_invokables`, use them to seed the\n    // new instance's `_invokables`\n    const invokables = this._invokables;\n\n    // Create a new `ValidationBuilder` that inherits from this `ValidationBuilder`\n    const VB = function() {\n        ValidationBuilder.call(this, invokables);\n    };\n\n    // Set the prototype so that registered functions are available\n    VB.prototype = Object.create(proto);\n    VB.prototype.constructor = VB;\n\n    // Instantiate the new `ValidationBuilder`\n    return new VB();\n};\n\n/**\n * Add a named function reference to the prototype of an instance of `ValidationBuilder`\n *\n * @param     {String}              name    A named function reference\n * @param     {Function}            fn      A reference to a validation function\n\n * @return    {ValidationBuilder}           The `ValidationBuilder` instance being\n *                                          operated on, used for function chaining\n */\nValidationBuilder.prototype.register = function(name, fn, memoize, debug, loggers) {\n    const proto = Object.getPrototypeOf(this);\n    proto[name] = function() {\n        this._invokables.push(new Invokable(name, fn, arguments, memoize, debug, loggers));\n\n        return this;\n    };\n\n    return this.fork(proto);\n};\n\n/**\n * Remove a named function reference from the prototype of an instance of `ValidationBuilder`\n * @param     {String}              name    A named function reference\n\n * @return    {ValidationBuilder}           The `ValidationBuilder` instance being\n *                                          operated on, used for function chaining\n */\nValidationBuilder.prototype.unregister = function(name) {\n    const proto = Object.getPrototypeOf(this);\n    delete proto[name];\n\n    const tmp = this.fork(proto);\n    tmp._invokables = this._invokables.filter(function(invokable) {\n        return invokable.getName() !== name;\n    });\n\n    return tmp;\n};\n\n/**\n * Convert an instance of `ValidationBuilder` to something that can be used to\n * validate some value\n *\n * @return    {Validation}      an Object with a `run()` method that can be called\n *                              with a value, will produce a list of `Results`\n */\nValidationBuilder.prototype.build = function() {\n    return new Validation(this._invokables);\n};\n\n/**\n * Create a representation of an instance of `ValidationBuilder`'s Invokable\n * function reference names and arguments that can be persisted then later used\n * by `hydrate()` recreate an equivalent `ValidationBuilder`\n *\n * @return    {String}      a stringified JSON blob that can be persisted\n */\nValidationBuilder.prototype.serialize = function(returnFull) {\n    return JSON.stringify(this._invokables.map(function(invokable) {\n        return invokable.serialize(returnFull);\n    }));\n};\n\n/**\n * Given a string representing a `serialize`'d `ValidationBuilder`, attempt to\n * recreate a list of `Invokables` by calling the named prototype references. If\n * the `serialize`'d `ValidationBuilder` includes a reference to an unavailable\n * prototype method, an error is thrown.\n *\n * @param     {String}    invokables    A `stringify`'d JSON blob representing a\n *                                      `ValidationBuilder`'s `Invokeable`'s\n * @return    {ValidationBuilder}\n */\nValidationBuilder.prototype.hydrate = function(invokables) {\n    const tmp = this.fork();\n    tmp._invokables = [];\n\n    JSON.parse(invokables).map(JSON.parse).forEach(function(invokable) {\n        const name = invokable._name;\n        const args = invokable._args;\n        const fn = Object.getPrototypeOf(tmp)[name];\n\n        if (fn) {\n            fn.apply(tmp, args);\n        } else {\n            throw new Error(`Method ${name} missing during validation builder hydration`);\n        }\n    });\n\n    return tmp;\n};\n\nexport default ValidationBuilder;\n",
    "static": true,
    "longname": "/Users/tim.carlson/Dev/chain/src/lib/ValidationBuilder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "fork",
    "memberof": "src/lib/ValidationBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ValidationBuilder.js~fork",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/ValidationBuilder.js",
    "importStyle": null,
    "description": "Create a clone of a `ValidationBuilder` instance so that it can be extended.",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "ValidationBuilder"
      ],
      "spread": false,
      "description": "a reference to a new `ValidationBuilder`"
    },
    "params": [
      {
        "name": "proto",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 18,
    "kind": "function",
    "name": "register",
    "memberof": "src/lib/ValidationBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ValidationBuilder.js~register",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/ValidationBuilder.js",
    "importStyle": null,
    "description": "Add a named function reference to the prototype of an instance of `ValidationBuilder`",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A named function reference"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "A reference to a validation function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationBuilder"
      ],
      "spread": false,
      "description": "The `ValidationBuilder` instance being\n                                         operated on, used for function chaining"
    }
  },
  {
    "__docId__": 19,
    "kind": "function",
    "name": "unregister",
    "memberof": "src/lib/ValidationBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ValidationBuilder.js~unregister",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/ValidationBuilder.js",
    "importStyle": null,
    "description": "Remove a named function reference from the prototype of an instance of `ValidationBuilder`",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A named function reference"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationBuilder"
      ],
      "spread": false,
      "description": "The `ValidationBuilder` instance being\n                                         operated on, used for function chaining"
    }
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "build",
    "memberof": "src/lib/ValidationBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ValidationBuilder.js~build",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/ValidationBuilder.js",
    "importStyle": null,
    "description": "Convert an instance of `ValidationBuilder` to something that can be used to\nvalidate some value",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "Validation"
      ],
      "spread": false,
      "description": "an Object with a `run()` method that can be called\n                             with a value, will produce a list of `Results`"
    },
    "params": []
  },
  {
    "__docId__": 21,
    "kind": "function",
    "name": "serialize",
    "memberof": "src/lib/ValidationBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ValidationBuilder.js~serialize",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/ValidationBuilder.js",
    "importStyle": null,
    "description": "Create a representation of an instance of `ValidationBuilder`'s Invokable\nfunction reference names and arguments that can be persisted then later used\nby `hydrate()` recreate an equivalent `ValidationBuilder`",
    "lineNumber": 108,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a stringified JSON blob that can be persisted"
    },
    "params": [
      {
        "name": "returnFull",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 22,
    "kind": "function",
    "name": "hydrate",
    "memberof": "src/lib/ValidationBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ValidationBuilder.js~hydrate",
    "access": "public",
    "export": false,
    "importPath": "Chain/src/lib/ValidationBuilder.js",
    "importStyle": null,
    "description": "Given a string representing a `serialize`'d `ValidationBuilder`, attempt to\nrecreate a list of `Invokables` by calling the named prototype references. If\nthe `serialize`'d `ValidationBuilder` includes a reference to an unavailable\nprototype method, an error is thrown.",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "A `stringify`'d JSON blob representing a\n                                     `ValidationBuilder`'s `Invokeable`'s"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 23,
    "kind": "function",
    "name": "ValidationBuilder",
    "memberof": "src/lib/ValidationBuilder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ValidationBuilder.js~ValidationBuilder",
    "access": "public",
    "export": true,
    "importPath": "Chain/src/lib/ValidationBuilder.js",
    "importStyle": "ValidationBuilder",
    "description": "A `ValidationBuilder` is used to create an extensible `Validation`.\n\nAn instance of `ValidationBuilder` will have prototype methods that are created\nthrough the `register()` method. When the `fork()` method is called all of the\ninstance's already registered methods will be transferred to a new instance of\n`ValidationBuilder` that is then returned. This is what allows you to 'extend'\na `Validation` as you can then continue to `register()` methods without mutating\nthe original `ValidationBuilder`'s prototype.\n\nThese prototypical methods are called `Invokable`'s. An `Invokable` is a named\nfunction reference that optionally includes some predefined arguments that can\nbe used to make specific comparisons.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "invokables",
        "description": "A set of already defined `Invokable`'s"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Chain\n\n![Node](https://img.shields.io/node/v/Chain.svg?style=flat-square)\n[![NPM](https://img.shields.io/npm/v/Chain.svg?style=flat-square)](https://www.npmjs.com/package/Chain)\n[![Travis](https://img.shields.io/travis/dotcarls/Chain/master.svg?style=flat-square)](https://travis-ci.org/dotcarls/Chain)\n[![David](https://img.shields.io/david/dotcarls/Chain.svg?style=flat-square)](https://david-dm.org/dotcarls/Chain)\n[![Coverage Status](https://img.shields.io/coveralls/dotcarls/Chain.svg?style=flat-square)](https://coveralls.io/github/dotcarls/Chain)\n\n> A framework to create efficient and extensible validations\n\n## Features\n\n-   Flexible\n-   Deterministic\n-   Extendable\n-   Persistable\n-   Portable\n\n## Overview\n\nOne problem with validation plugins, frameworks, etc. is that they are usually opinionated in some way -- they have an inflexible API, require certain dependencies, etc. This hampers reusability and introduces additional complexity as an application's validation requirements evolve over time. Further, if we wanted to conditionally validate certain attributes (i.e. allow an end user to 'configure' the validation), we would typically have to hard code this functionality into each validation.\n\nThe goal of this module is to solve these problems without getting in the way. By prioritizing validation composition over all else, this framework is ideal for creating complex validations that are both portable and maintainable.\n\n## Usage\n\n### Example\n```js\nvar ValidationBuilder = require('./lib');\nvar VB = new ValidationBuilder();\n\nVB.register('strictEqual', function (val1, val2) {\n    return val1 === val2;\n});\n\nvar validation = VB.forge().strictEqual('a').build();\nconsole.log('validation of \"a\":', validation.run('a'));\nconsole.log('validation of \"b\":', validation.run('b'));\n```\n\nA Validation begins with an instance of `ValidationBuilder`. The general lifecycle of a `ValidationBuilder` instance is: instantiation, registration, composition, and building.\n\n### Instantiation\n\nAn instance can be created by creating a new `ValidationBuilder`:\n\n```js\n// new ValidationBuilder\nvar VB = new ValidationBuilder();\n```\n\nAn instance can also be created from existing instances of `ValidationBuilder` via the `forge()` method:\n\n```js\n// new ValidationBuilder\nvar VB = new ValidationBuilder();\n\n// someValidation 'extends' VB\nvar someValidation = VB.forge();\n\n// anotherValidation 'extends' someValidation\nvar anotherValidation = someValidation.forge();\n```\n\nWhen an instance is `forge()`'d, its prototype is copied by reference and used to instantiate a new instance of `ValidationBuilder` that is then returned. The result of calling`forge()` is a 'child' instance which can be acted on without affecting its parent.\n\n### Registration\n\nA fresh instance of `ValidationBuilder` won't be able to do much -- we must 'register' functions so that they can be used during the composition phase. Registering a function will add an instance method to an instance of `ValidationBuilder`. Doing so makes the registered function available for use during composition. To register a function, provide `register()` with a `name` and a function reference or declaration.\n\n```js\n// new ValidationBuilder\nvar VB = new ValidationBuilder();\n\nVB.register('strictEqual', function(val1, val2) {\n    return val1 === val2;\n});\n```\n\nThe `name` attribute is used to promote determinism in cases where function references can not be passed around. Consider the case where we want to validate something on the server and the client -- the server may have a `hasValue` function available from `vcutils` and the client may have a `hasValue` function available from `DeviceSettings`. If two named functions are functionally equivalent (produce the exact same output for every possible input) then we can say overall the validation is deterministic regardless of its execution context.\n\nWhen registering a function, we accept a `name` and a function reference.  When these instance methods are called, they create an `Invokable` which represents a function and optionally some arguments.\n\n### Examples\n\nSee [`example`](example/script.js) folder or the [runkit](https://runkit.com/dotcarls/Chain) example.\n\n### Builds\n\nIf you don't use a package manager, you can [access `Chain` via unpkg (CDN)](https://unpkg.com/Chain/), download the source, or point your package manager to the url.\n\n`Chain` is compiled as a collection of [CommonJS](http://webpack.github.io/docs/commonjs.html) modules & [ES2015 modules](http://www.2ality.com/2014/0\n  -9/es6-modules-final.html) for bundlers that support the `jsnext:main` or `module` field in package.json (Rollup, Webpack 2)\n\nThe `Chain` package includes precompiled production and development [UMD](https://github.com/umdjs/umd) builds in the [`dist` folder](https://unpkg.com/Chain/dist/). They can be used directly without a bundler and are thus compatible with many popular JavaScript module loaders and environments. You can drop a UMD build as a [`<script>` tag](https://unpkg.com/Chain) on your page. The UMD builds make `Chain` available as a `window.Chain` global variable.\n\n### License\n\nThe code is available under the [MIT](LICENSE) license.\n\n### Contributing\n\nWe are open to contributions, see [CONTRIBUTING.md](CONTRIBUTING.md) for more info.\n\n### Misc\n\nThis module was created using [generator-module-boilerplate](https://github.com/duivvv/generator-module-boilerplate).\n",
    "longname": "/Users/tim.carlson/Dev/chain/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]